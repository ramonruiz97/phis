#Â CSP FACTORS
#
#
#


# Csp basics {{{
#    This rule copies Csp factors from analysis/params and places them according
#    to the name of the output. It only runs for none or old wildcards, which
#    basically mean the use of no Csp factors or to use the 2019 note ones.

rule csp_factors_basics:
  wildcard_constraints:
    csp = "(none|old|gen)"
  output:
    "output/params/csp_factors/{year}/{mode}/{version}_{csp}.json",
  run:
    import os
    csp = "analysis/params/csp_factors/{wildcards.mode}/{wildcards.csp}.json"
    shell(f"mkdir -p {os.path.dirname(f'{output}')}")
    shell(f"cp {csp} {output}")

# }}}


# Clone Csp from git {{{

rule csp_factors_from_git:
  threads: 128
  wildcard_constraints:
    # version = "v0r0",#"(v0r0|v0r1)",                      # v0r0 not allowed
    csp = "(vgc)"
  params:
    repo = "ssh://git@gitlab.cern.ch:7999/lhcb-b2cc/Bs2JpsiPhi-FullRun2.git",
    linker = "analysis/params/csp_factors/linker.json"
  output:
    params = "output/params/csp_factors/{year}/{mode}/{version}_{csp}.json",
  log:
    "output/log/csp_factors_from_git/{year}/{mode}/{version}_{csp}.json"
  run:
    shell(f"""(time\
    python analysis/csp_factors/download_from_git.py\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version v0r5\
    --csp {wildcards.csp}\
    --output {output}\
    --repo {params.repo}\
    --linker {params.linker}\
    ) &> {log}""")

# }}}


# rules to compute csp factors {{{

rule csp_factors_efficiency_hist_yearly:
    """
    Efficiency histograms in m(KK) for Csp factors.
    """
    input:
        mc = lambda w: expand(SAMPLES+"/{year}/{mode}/{version}.root",
                    year=YEARS[f'{w.year}'],
                    mode=w.mode,
                    version=w.version),
        pgun = lambda w: expand(SAMPLES+"/{year}/GUN_Bs2JpsiKK_Swave/{version}.root",
                    version=config['tuples_standalone_version'],
                    year=YEARS[f'{w.year}'],
                    mode=w.mode)
    output:
        histos = 'output/params/mass_efficiencies/{year}/{mode}/{version}_yearly{nbins}.npy',
        plots = 'output/figures/mass_efficiencies/{year}/{mode}/{version}_yearly{nbins}.pdf'
    params:
        script = 'analysis/csp_factors/efficiency.py',
    log:
        "output/log/csp_factors_efficiency/{year}/{mode}/{version}_yearly{nbins}.log"
    run:
        mc = input.mc
        mc = [mc] if isinstance(mc,str) else mc
        pgun = input.pgun
        pgun = [pgun] if isinstance(pgun,str) else pgun
        shell(f"""(time\
        python {params.script} \
        --simulated-sample {','.join(mc)} \
        --pgun-sample {','.join(pgun)} \
        --output-figure {output.plots} \
        --output-histos {output.histos} \
        --mode {wildcards.mode} \
        --year {wildcards.year} \
        --nbins {wildcards.nbins} \
        ) &> {log}""")


rule csp_factors_calculate_yearly:
    """
    Calculate Csp factors and save them in a json file.
    """
    wildcard_constraints:
        mode = "MC_.*"
    input:
        histos = 'output/params/mass_efficiencies/{year}/{mode}/{version}_yearly{nbins}.npy',
    output:
        csp = 'output/params/csp_factors/{year}/{mode}/{version}_yearly{nbins}.json',
    params:
        script = 'analysis/csp_factors/calculate_coeffs.py',
    log:
        "output/log/csp_factors_calculate/{year}/{mode}/{version}_yearly{nbins}.log"
    run:
        shell(f"""(time\
        python {params.script}\
        --output {output.csp}\
        --histos {input.histos}\
        --mode {wildcards.mode}\
        --year {wildcards.year}\
        --nbins {wildcards.nbins}\
        ) &> {log}""")


rule csp_factors_merge:
    """
    Calculate Csp factors and save them in a json file.
    """
    wildcard_constraints:
        mode = "(Bs2JpsiPhi)"
    input:
        lambda w: expand('output/params/csp_factors/{year}/MC_Bs2JpsiKK_Swave/{version}_yearly{nbins}.json',
        # lambda w: expand('output/params/csp_factors/{year}/MC_Bs2JpsiPhi/{version}_yearly{nbins}.json',
                         year=w.year if w.csp =="yearly" else YEARS[w.csp],
                         version=w.version,
                         nbins=w.nbins),
    output:
        'output/params/csp_factors/{year}/{mode}/{version}_{csp}{nbins,\d{1}}.json',
    log:
        "output/log/csp_factors_calculate/{year}/{mode}/{version}_{csp}{nbins}.log"
    run:
        import ipanema
        from uncertainties import unumpy, ufloat
        import numpy as np
        pars = f"{input}".split(' ')
        print(pars)
        if len(pars) < 2:
            shell(f"cp {input} {output}")
            return
        pars = [ipanema.Parameters.load(p) for p in pars]
        for p in pars:
            print(p)
        merged = ipanema.Parameters()
        for k in pars[0].keys():
            if "mKK" in k:
              merged.add(dict(
                name=k,
                value=pars[0][k].value,
                stdev=pars[0][k].stdev,
                free=pars[0][k].free
                ))
            else:
              _values = [p[k].uvalue.n for p in pars]
              _errors = [p[k].uvalue.s+1e-5 for p in pars]
              print(_values, _errors)
              arr = unumpy.uarray(_values, _errors)
              # avg = sum(arr)/len(arr)
              avg = ufloat(np.mean(_values), np.std(_values))
              print(avg)
              merged.add(dict(
                  name=k, value=avg.n, stdev=avg.s, free=False
                  ))
        print(merged)
        merged.dump(f"{output}")


# rule csp_factors_merge_files_for_Csp:
#     params:
#         file_names = '/eos/lhcb/wg/B2CC/Bs2JpsiPhi-FullRun2/'+config['version']+'/{mode}/2015/{mode}_2015_selected_bdt_'+config['version']+'.root ' + '/eos/lhcb/wg/B2CC/Bs2JpsiPhi-FullRun2/'+config['version']+'/{mode}/2016/{mode}_2016_selected_bdt_'+config['version']+'.root ' + '/eos/lhcb/wg/B2CC/Bs2JpsiPhi-FullRun2/'+config['version']+'/{mode}/2017/{mode}_2017_selected_bdt_'+config['version']+'.root ' + '/eos/lhcb/wg/B2CC/Bs2JpsiPhi-FullRun2/'+config['version']+'/{mode}/2018/{mode}_2018_selected_bdt_'+config['version']+'.root ' 
#     output:
#         config['localeos'] + '/' + config['version'] + '/{mode}/All/{mode}_All_selected_bdt_' + config['version']  + '.root'
#     shell:
#         'hadd {output} {params.file_names}'
#
#
#
# rule csp_factors_csp_eff_hist_all:
#     """
#     Efficiency histograms in m(KK) for Csp factors using all years.
#     """
#     input:
#         script = '../Csp/epsmKK.py',
#         name_file1 = expand(rules.merge_files_for_Csp.output, mode='{mode}')
#     output:
#         directory(tuples_path('Csp/{mode}/All/eff_hists/'))
#     params:
#         #name_file1 = lambda wildcards: config['localeos'] + '/' + config['version']+ '/{}/All/{}_All_selected_bdt_{}.root'.format(wildcards.mode, wildcards.mode, config['version']),
#         name_file2 = lambda wildcards: config['localeos'] + '/MC_Csp_standalone/BsMuMuKK_All.root' if 'Swave' in wildcards.mode else '/eos/lhcb/wg/B2CC/phis-run2/mc/new1/bsjpsiphi_CPLH_10M.root',
#         tree_name_file2 = lambda wildcards: trees_Csp_den[wildcards.mode]
#     shell:
#         config['runUrania'] + ' ' +
#         'python {input.script} --input-file1 {input.name_file1} \
#                               --input-file2 {params.name_file2} \
#                               --input-tree-name-file2 {params.tree_name_file2} \
#                               --output-dir {output} \
#                               --mode {wildcards.mode}\
#                               --year All'
#
#
#
# rule CspFactors_all:
#     """
#     Calculate Csp factors and save them in a json file.
#     """
#     input:
#         script = '../Csp/Csp_factors.py',
# 	dir1 = expand(rules.Csp_eff_hist_all.output, mode='MC_Bs2JpsiPhi'),
# 	dir2 = expand(rules.Csp_eff_hist_all.output, mode='MC_Bs2JpsiKK_Swave')
#     output:
#         tuples_path('Csp/All/CspFactorsAll.json').replace('selection/output/tuples','fitinputs/'+config['version'])
#     shell:
#         config['runUrania'] + ' ' +
# 	'python {input.script} --input-dir1 {input.dir1} \
#                               --input-dir2 {input.dir2} \
#                               --year All\
#                               --output {output}'

# }}}


# vim:foldmethod=marker
