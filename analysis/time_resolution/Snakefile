# TIME RESOLUTION
#
#
#


# Time resolution basics {{{
#    This rule copies Csp factors from analysis/params and places them according
#    to the name of the output.

rule time_resolution_basics:
  wildcard_constraints:
    timeres = "(none|old)"
  output:
    "output/params/time_resolution/{year}/{mode}/{version}_{timeres}.json",
  run:
    import os
    res = "analysis/params/time_resolution/{wildcards.mode}/{wildcards.timeres}.json"
    shell(f"mkdir -p {os.path.dirname(f'{output}')}")
    shell(f"cp {res} {output}")


rule time_resolution_offset:
  output:
    "output/params/time_offset/{year}/{mode}/{version}_{timeres}.json",
  run:
    import os
    from ipanema import Parameters
    mode = f"{wildcards.mode}"
    year = f"{wildcards.year}"
    pars = Parameters.load(f"analysis/params/time_resolution/{mode}/none.json")
    output_file = f"{output}"

    # TODO: this should be either computed withing this analysis pipeline or
    # moved elsewhere in fs
    meson = {
        "Bs2JpsiPhi": {
           '2015': -4.853652301889032,
           '2016': -6.122278950797789,
           '2017': -7.130933450563839,
           '2018': -5.870099929940548
        },
        "Bd2JpsiKstar": {
           '2015': -4.264111432238109,
           '2016': -5.375427671067498,
           '2017': -6.2590084518453155,
           '2018': -5.1545189890594285
        }
    }

    if not "v0r0" in f"{wildcards.version}":
        if mode in meson.keys():
            pars['mu'].set(value=1e-3 * meson[mode][year])
    pars.dump(output_file)

# }}}


# Time resolution from git {{{
#    Currently time resolution is only computed at NIKHEF, hence we need to sync
#    it from there.

rule time_resolution_from_git:
  threads: 128
  wildcard_constraints:
    timeres = "ams(rd|mc|dg0)"
  input:
    "output/params/time_offset/{year}/{mode}/{version}_{timeres}.json",
  params:
    repo = "ssh://git@gitlab.cern.ch:7999/lhcb-b2cc/Bs2JpsiPhi-FullRun2.git",
    linker = "analysis/params/time_resolution/linker.json"
  output:
    "output/params/time_resolution/{year}/{mode}/{version}_{timeres}.json",
  log:
    "output/log/time_resolution_from_git/{year}/{mode}/{version}_{timeres}.log",
  run:
    shell(f"""(time\
    python analysis/time_resolution/download_from_git.py\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version v4r0\
    --timeres {wildcards.timeres}\
    --output {output}\
    --repo {params.repo}\
    --linker {params.linker}\
    ) &> {log}""")
    # TODO: move this to the script itself / create another rule to merge time
    # resolution and time offset
    import ipanema
    res = ipanema.Parameters.load(f"{output}")
    off = ipanema.Parameters.load(f"{input}")
    res['mu'].set(value=off['mu'].value, stdev=off['mu'].stdev)
    res.dump(f"{output}")
    print(res)

# }}}


# for the future
# es el modo: Bs2JpsiPhi_Prompt_mixPV
# en teoria solo tiene WPV
rule time_resolution_wpv_shape:
    input:
        data = lambda wcs: tuples(wcs, version='v0r5', mode='Bs2JpsiPhi_Prompt_mixPV', weight='chopped')
    output:
        plots = directory('output/figures/wpv_shape/{year}/Bs2JpsiPhi_Prompt_mixPV/{version}_{wpv}_{trigger}'),
        json = 'output/params/wpv_shape/{year}/Bs2JpsiPhi_Prompt_mixPV/{version}_{wpv}_{trigger}.json'
    params:
        script = 'analysis/time_resolution/wrong_pv_component.py',
    log:
        'output/log/wpv_shape/{year}/Bs2JpsiPhi_Prompt_mixPV/{version}_{wpv}_{trigger}.log'
    run:
        shell(f"""(time\
        python {params.script} \
        --data-in {input.data} \
        --wpv {wildcards.wpv} \
        --wpv-out {output.json} \
        --plots-out {output.plots} \
        ) &> {log}""")


rule time_resolution_calculate_gb_weights:
    input:
        mc = lambda wcs: tuples(wcs, mode='MC_Bs2JpsiPhi_Prompt', weight='chopped'),
        rd = lambda wcs: tuples(wcs, mode='Bs2JpsiPhi_Prompt', weight='chopped'),
        # target_file = lambda wildcards: XRootD.remote(expand(files_from_configuration('{}'.format( 'Bs_sw' if wildcards.label == 'MC_Bs' else 'Bs_prompt')), year = '{year}')),
        # files = lambda wildcards: XRootD.remote(expand(files_from_configuration('{}'.format(wildcards.label)), year = '{year}'))
    output:
        SAMPLES+'/{year}/MC_Bs2JpsiPhi_Prompt/{version}_gbWeight.root'
    params:
        script = 'analysis/time_resolution/reweighter.py',
    run:
        shell('python {params.script} --original-file {input.mc} \
                               --target-file {input.rd} \
                               --mode MC_Bs2JpsiPhi_Prompt \
                               --output-file {output}')


rule time_resolution_prompt:
    wildcard_constraints:
        mode = '(MC_)?Bs2JpsiPhi_Prompt',
        timeres = "(double|triple)(\d{1,2})of(\d{1,2})"
    input:
        wpv_shape = lambda w: expand('output/params/wpv_shape/{year}/Bs2JpsiPhi_Prompt_mixPV/{version}_{wpv}_{trigger}.json',
                                     wpv=f"{config['wpv_model']}{config['wpv_nbins']}",
                                     year=w.year, trigger=w.trigger, version=w.version),
        data = lambda w: tuples(w, weight='chopped'),
    output:
        plots = directory('output/figures/time_resolution_fit/{year}/{mode}/{version}_{timeres}_{trigger}'),
        json = 'output/params/time_resolution_fit/{year}/{mode}/{version}_{timeres}_{trigger}.json',
        #       output/params/time_resolution/Bs2JpsiPhi_Prompt/v0r5_doubleClassical10_combined.json
        data_ll = SAMPLES+'/{year}/{mode}/{version}_llComponent~{timeres}~{trigger}.npy'
    params:
        double = 'analysis/time_resolution/script1.py',
        triple = 'analysis/time_resolution/script2.py',
    log:
        'output/log/time_resolution_fit/{year}/{mode}/{version}_{timeres}_{trigger}.log'
    run:
        script = params.double if 'double' in wildcards.timeres else params.triple
        shell(f"""(time\
        python {script}\
        --in-data {input.data} \
        --timeres {wildcards.timeres}\
        --in-wpv {input.wpv_shape}\
        --out-json {output.json}\
        --out-plots {output.plots}\
        --out-data {output.data_ll}\
        ) &> {log}""")


rule time_resolution_signal:
    wildcard_constraints:
        mode = 'MC_Bs2JpsiPhi',
        timeres = "(double|triple)(\d{1,2})of(\d{1,2})"
    input:
        wpv_shape = lambda w: expand('output/params/wpv_shape/{year}/Bs2JpsiPhi_Prompt_mixPV/{version}_{wpv}_{trigger}.json',
                                     wpv=f"{config['wpv_model']}{config['wpv_nbins']}",
                                     year=w.year, trigger=w.trigger, version=w.version),
        data = lambda w: tuples(w, weight='ready'),
    output:
        plots = directory('output/figures/time_resolution_fit/{year}/{mode}/{version}_{timeres}_{trigger}'),
        json = 'output/params/time_resolution_fit/{year}/{mode}/{version}_{timeres}_{trigger}.json',
        #       output/params/time_resolution/Bs2JpsiPhi_Prompt/v0r5_doubleClassical10_combined.json
        data_ll = SAMPLES+'/{year}/{mode}/{version}_llComponent~{timeres}~{trigger}.npy'
    params:
        double = 'analysis/time_resolution/script1.py',
        triple = 'analysis/time_resolution/script2.py',
    log:
        'output/log/time_resolution_fit/{year}/{mode}/{version}_{timeres}_{trigger}.log'
    run:
        script = params.double if 'double' in wildcards.timeres else params.triple
        shell(f"""(time\
        python {script}\
        --in-data {input.data} \
        --timeres {wildcards.timeres} \
        --mode {wildcards.mode} \
        --in-wpv {input.wpv_shape} \
        --out-json {output.json} \
        --out-plots {output.plots} \
        --out-data {output.data_ll} \
        ) &> {log}""")


rule time_resolution_dilution_computation:
    wildcard_constraints:
        mode = '(MC_Bs2JpsiPhi(_Prompt)?|Bs2JpsiPhi_Prompt)',
        timeres = "(double|triple)",
        total_bins = "\d{1,2}"
    input:
        data = lambda w: tuples(w, weight='chopped'),
        json = lambda w: expand('output/params/time_resolution_fit/{year}/{mode}/{version}_{timeres}{this_bin}of{total_bins}_{trigger}.json',
                                year=w.year, mode=w.mode, version=w.version, trigger=w.trigger,
                                timeres = w.timeres,
                                # total_bins=config['timeres_nbins'],
                                total_bins=w.total_bins,
                                this_bin=range(1,int(w.total_bins)+1)),
        data_ll = lambda w: expand(SAMPLES+'/{year}/{mode}/{version}_llComponent~{timeres}{this_bin}of{total_bins}~{trigger}.npy',
                                   year=w.year, mode=w.mode, version=w.version, trigger=w.trigger,
                                   timeres = w.timeres,
                                   # total_bins=config['timeres_nbins'],
                                   total_bins=w.total_bins,
                                   this_bin=range(1,int(w.total_bins)+1)),
    output:
        json = 'output/params/time_resolution_dilution/{year}/{mode}/{version}_{timeres}{total_bins}_{trigger}.json',
        #       output/params/time_resolution_dilution/2015/Bs2JpsiPhi_Prompt/v0r5_doubleClassical10_combined.json
    log:
        'output/log/time_resolution_dilution/{year}/{mode}/{version}_{timeres}{total_bins}_{trigger}.log',
    params:
        script = 'analysis/time_resolution/compute_dilution.py',
    run:
        fpars = input.json
        fpars = [fpars] if isinstance(fpars,str) else fpars
        dlongl = input.data_ll
        dlongl = [dlongl] if isinstance(dlongl,str) else dlongl
        shell(f"""(time python {params.script}\
        --data-in {input.data}\
        --data-ll {",".join(dlongl)}\
        --timeres {wildcards.timeres}\
        --total-bins {wildcards.total_bins}\
        --mode {wildcards.mode}\
        --json-in {",".join(fpars)}\
        --json-out {output.json}\
        ) &> {log}""")


rule time_resolution_calibration_numerical:
    wildcard_constraints:
        mode = '(MC_Bs2JpsiPhi(_Prompt)?|Bs2JpsiPhi_Prompt)',
        timeres = "(double|triple)",
    input:
        data = lambda wcs: tuples(wcs, weight='chopped'),
        json_bin = expand('output/params/time_resolution_fit/{{year}}/{{mode}}/{{version}}_{{timeres}}{ibin}_combined.json', ibin=range(1,10+1)),
        json_num = 'output/params/time_resolution_dilution/{year}/{mode}/{version}_{timeres}_combined.json',
    output:
        plots = directory('output/figures/time_resolution/{year}/{mode}/{version}_{timeres}'),
        jsonLinear = 'output/params/time_resolution/{year}/{mode}/{version}_{timeres}Linear.json',
        jsonParab = 'output/params/time_resolution/{year}/{mode}/{version}_{timeres}Parab.json'
    params:
        script = 'analysis/time_resolution/calibration.py',
    log:
        'output/log/time_resolution/{year}/{mode}/{version}_{timeres}.log'
    run:
        fpars = input.json_bin
        fpars = [fpars] if isinstance(fpars,str) else fpars
        shell(f"""(time\
        python {params.script}\
        --in-data {input.data} \
        --timeres {wildcards.timeres}\
        --mode {wildcards.mode}\
        --in-json-bin {",".join(fpars)}\
        --in-json-num {input.json_num}\
        --out-json-linear {output.jsonLinear}\
        --out-json-parab {output.jsonParab}\
        --out-plot {output.plots}\
        ) &> {log}""")


rule time_resolution_dilution_translation:
    wildcard_constraints:
        mode = 'Bs2JpsiPhi'
    input:
        json_mc = 'output/params/time_resolution_dilution/{year}/MC_Bs2JpsiPhi/{version}_{timeres}_{trigger}.json',
        json_mc_prompt = 'output/params/time_resolution_dilution/{year}/MC_Bs2JpsiPhi_Prompt/{version}_{timeres}_{trigger}.json',
        json_rd_prompt = 'output/params/time_resolution_dilution/{year}/Bs2JpsiPhi_Prompt/{version}_{timeres}_{trigger}.json',
    output:
        json_rd = 'output/params/time_resolution_dilution/{year}/{mode}/{version}_{timeres}_{trigger}.json',
    params:
        script = 'analysis/time_resolution/translate.py',
    log:
        'output/log/time_resolution_dilution/{year}/{mode}/{version}_{timeres}_{trigger}.log'
    run:
        shell(f"""(time\
        python {params.script}\
        --timeres {wildcards.timeres}\
        --mode {wildcards.mode}\
        --in-json-mc {input.json_mc}\
        --in-json-mc-prompt {input.json_mc_prompt}\
        --in-json-rd-prompt {input.json_rd_prompt}\
        --out-json-rd {output.json_rd}\
        ) &> {log}""")


rule time_resolution_calibration_translate:
    wildcard_constraints:
        mode = 'Bs2JpsiPhi'
    input:
        data = lambda wcs: tuples(wcs, version=f"{wcs.version}".split('@')[0],mode='Bs2JpsiPhi_Prompt', weight='chopped'),
        json_old = lambda wcs: expand('output/params/time_resolution_dilution/{year}/{mode}_Prompt/{version}_{timeres}_combined.json',
                                    version=f"{wcs.version}".split('@')[0],
                                    year=f"{wcs.year}",
                                    mode=f"{wcs.mode}",
                                    timeres=f"{wcs.timeres}",
                          ),
        json_trs = lambda wcs: expand('output/params/time_resolution_dilution/{year}/{mode}/{version}_{timeres}_combined.json',
                                    version=f"{wcs.version}".split('@')[0],
                                    year=f"{wcs.year}",
                                    mode=f"{wcs.mode}",
                                    timeres=f"{wcs.timeres}",
                          ),
    output:
        plots = directory('output/figures/time_resolution/{year}/{mode}/{version}_{timeres}'),
        jsonLinear = 'output/params/time_resolution/{year}/{mode}/{version}_{timeres}Linear.json',
        jsonParab = 'output/params/time_resolution/{year}/{mode}/{version}_{timeres}Parab.json'
    params:
        script = 'analysis/time_resolution/calibration.py',
    log:
        'output/log/time_resolution/{year}/{mode}/{version}_{timeres}.log'
    run:
        shell(f"""(time\
        python {params.script}\
        --in-data {input.data} \
        --timeres {wildcards.timeres}\
        --mode {wildcards.mode}\
        --in-json-bin {input.json_old}\
        --in-json-num {input.json_trs}\
        --out-json-linear {output.jsonLinear}\
        --out-json-parab {output.jsonParab}\
        --out-plot {output.plots}\
        ) &> {log}""")


# vim: fdm=marker
