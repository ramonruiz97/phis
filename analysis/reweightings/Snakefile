# REWEIGHTING
#
#   Description: Contains all rules related to the reweighting pipeline, both
#                and plotting rules.
#                * DESCRIPTION OF WILDCARDS NEEDED *
#
#        Author: Marcos Romero Lamas (mromerol@cern.ch)


# polarity weighting {{{
#    Adds polWeight to MC tuples matching the corresponding data sample. This
#    rule runs only over MC tuples.

rule reweighting_polarity:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bu2JpsiKplus|Bs2JpsiKK_Swave)"
  input:
    original = lambda wcs: tuples(wcs, weight='veloWeight'),
    target = lambda wcs: tuples(wcs, mode='data', weight='sWeight'),
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_polWeight.root')
  log:
    'output/log/reweighting_polarity/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/polarity_weighting.py\
    --original-file {input.original}\
    --original-treename DecayTree\
    --target-file {input.target}\
    --target-treename DecayTree\
    --output-file {output.sample}
    ) &> {log}""")
    send_mail(f"Polarity weighting :: {wildcards}", f"{log}")

# }}}


# p.d.f. weighting {{{
#    Adds pdfWeight to MC tuples matching the corresponding data sample. This
#    rule runs only over MC tuples. This rule works for Bs and Bd modes only 
#    (pdfWeight does not exist for Bu samples).
#    WARNING: This weight should not be used for the @evt(Even|Odd) check,
#             unless you really wish MC to have Swave and other properties
#             of Run 1 data

rule reweighting_pdf:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bs2JpsiKK_Swave)"
  input:
    sample = lambda wcs: tuples(wcs, weight='dg0Weight'),
  params:
    original = lambda wcs: f"{wcs.year}/{'Bs2JpsiPhi' if 'Bs' in f'{wcs.mode}' else 'Bd2JpsiKstar'}.json",
    target = lambda wcs: f"{wcs.year}/{wcs.mode}.json",
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_pdfWeight.root')
  log:
    'output/log/reweighting_pdf/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/pdf_weighting.py\
    --input-file {input.sample}\
    --tree-name DecayTree\
    --output-file {output.sample}\
    --target-params analysis/params/generator/{params.target}\
    --original-params analysis/params/generator/{params.original}\
    --mode {wildcards.mode}\
    ) &> {log}""")
    send_mail(f"PDF weighting :: {wildcards}", f"{log}")


rule reweighting_dg0:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "(MC_Bs2JpsiPhi|MC_Bs2JpsiKK_Swave)"
  input:
    sample = lambda wcs: tuples(wcs,weight='polWeight'),
  params:
    original = lambda wcs: f"{wcs.year}/MC_Bs2JpsiPhi_dG0.json",
    target = lambda wcs: f"{wcs.year}/{wcs.mode}.json",
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_dg0Weight.root')
  log:
    'output/log/reweighting_dg0/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/pdf_weighting.py\
    --input-file {input.sample}\
    --tree-name DecayTree\
    --output-file {output.sample}\
    --target-params analysis/params/generator/{params.target}\
    --original-params analysis/params/generator/{params.original}\
    --mode {wildcards.mode}\
    ) &> {log}""")
    send_mail(f"dG0 weighting :: {wildcards}", f"{log}")

# }}}


# kinematic Bs weighting {{{
#    Adds kinWeight to MC_BsJpsiPhi*, MC_BdJpsiKstar and Bd2JpsiKstar tuples
#    gb-weighting them to match kinematic distributions of their complementary
#    sample.

rule reweighting_kinematic_Bs:
  resources:
    mem_mb=8000,
    threads=2
  wildcard_constraints:
    mode = "(MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bu2JpsiKplus|Bs2JpsiKK_Swave)|Bd2JpsiKstar|Bu2JpsiKplus)"
  input:
    original = lambda wcs: tuples(wcs, weight='oddWeight'),
    target = lambda wcs: tuples(wcs, mode='cdata', weight='kinWeight'),
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_kinWeight.root')
  log:
    'output/log/reweighting_kinematic_Bs/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/kinematic_weighting.py\
    --original-file {input.original}\
    --original-treename DecayTree\
    --target-file {input.target}\
    --target-treename DecayTree\
    --output-file {output.sample}\
    --mode {wildcards.mode}\
    --year {wildcards.year}\
    --version {wildcards.version}\
    --weight-set kbsWeight\
    ) &> {log}""")
    send_mail(f"Kinematic Bs weighting :: {wildcards}", f"{log}")


rule reweighting_kinematic_Bu:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "(MC_)?Bd2JpsiKstar"
  input:
    original = lambda wcs: tuples(wcs, weight='phiWeight'),
    target = lambda wcs: tuples(wcs,
      mode='Bu2JpsiKplus' if f'{wcs.mode}'=='Bd2JpsiKstar' else 'Bd2JpsiKstar',
      weight='kbuWeight'),
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_kbuWeight.root')
  log:
    'output/log/reweighting_kinematic_Bu/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/kinematic_weighting.py\
    --original-file {input.original}\
    --original-treename DecayTree\
    --target-file {input.target}\
    --target-treename DecayTree\
    --output-file {output.sample}\
    --mode {wildcards.mode}\
    --year {wildcards.year}\
    --version {wildcards.version}\
    --weight-set kbuWeight\
    ) &> {log}""")
    send_mail(f"Kinematic Bu weighting :: {wildcards}", f"{log}")


rule reweighting_kinematic_Bd:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "MC_Bd2JpsiKstar"
  input:
    original = lambda wcs: tuples(wcs, weight='pdfWeight'),
    target = lambda wcs: tuples(wcs, mode='Bd2JpsiKstar', weight='kbdWeight'),
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_kbdWeight.root')
  log:
    'output/log/reweighting_kinematic_Bd/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/kinematic_weighting.py\
    --original-file {input.original}\
    --original-treename DecayTree\
    --target-file {input.target}\
    --target-treename DecayTree\
    --output-file {output.sample}\
    --mode {wildcards.mode}\
    --year {wildcards.year}\
    --version {wildcards.version}\
    --weight-set kbdWeight\
    ) &> {log}""")
    send_mail(f"Kinematic Bd weighting :: {wildcards}", f"{log}")


rule reweighting_kinematic_odd:
  resources:
    mem_mb=7168
  wildcard_constraints:
    mode = "MC_(Bs2JpsiPhi(_dG0)?|Bd2JpsiKstar|Bu2JpsiKplus|Bs2JpsiKK_Swave)"
  input:
    original = lambda wcs: tuples(wcs, weight='kbuWeight'),
    target = lambda wcs: tuples(wcs, mode='cdata', weight='kinWeight'),
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_oddWeight.root')
  log:
    'output/log/reweighting_kinematic_odd/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/kinematic_weighting.py\
    --original-file {input.original}\
    --original-treename DecayTree\
    --target-file {input.target}\
    --target-treename DecayTree\
    --output-file {output.sample}\
    --mode {wildcards.mode}\
    --year {wildcards.year}\
    --version {wildcards.version}\
    --weight-set oddWeight\
    ) &> {log}""")
    send_mail(f"Kinematic Odd weighting :: {wildcards}", f"{log}")


rule reweighting_phi:
  resources:
    mem_mb=7168
  wildcard_constraints:
    # mode = "(MC_)?(Bs2JpsiPhi(_dG0)?)"
    mode = "(MC_)?(Bd2JpsiKstar)"
  input:
    original = lambda wcs: tuples(wcs, weight='pdfWeight'),
    target = lambda wcs: tuples(wcs, mode=f"{wcs.mode}".replace("Bd2JpsiKstar", "Bs2JpsiPhi"), weight='polWeight'),
  output:
    sample = temporal(SAMPLES+'/{year}/{mode}/{version}_phiWeight.root')
  log:
    'output/log/reweighting_pdf/{year}/{mode}/{version}.log'
  run:
    shell(f"""(time\
    python analysis/reweightings/kinematic_weighting.py\
    --original-file {input.original}\
    --original-treename DecayTree\
    --target-file {input.target}\
    --target-treename DecayTree\
    --output-file {output.sample}\
    --mode {wildcards.mode}\
    --year {wildcards.year}\
    --version {wildcards.version}\
    --weight-set phiWeight\
    ) &> {log}""")
    send_mail(f"Kinematic Odd weighting :: {wildcards}", f"{log}")

# }}}


# reweighting plots {{{
#    Creates some plots for the reweightings done for the time acceptance,
#    angular acceptance and some comparison with Simon

rule reweightings_plot_time_acceptance:
  resources:
    mem_mb=1024
  input:
    original = lambda wcs: tuples(wcs),
    target = lambda wcs: tuples(wcs, mode='cdata')
  output:
    'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9@]+}_{branch}_{trigger}.pdf'
  log:
    'output/log/reweightings/plot_time_reweightings/{year}/{mode}/{version}_{branch}_{trigger}.log',
  run:
    shell(f"""(time\
    python analysis/reweightings/reweighting_plots.py\
    --original {input.original}\
    --target {input.target}\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version {wildcards.version}\
    --branch {wildcards.branch}\
    --output {output}\
    --trigger {wildcards.trigger}\
    ) &> {log}""")
    send_mail(f"Reweighting plots TA :: {wildcards}", f"{log}", f"{output}".split(' '))


rule reweightings_plot_angular_acceptance:
  wildcard_constraints:
    mode = "(TOY|MC)_Bs2JpsiPhi(_dG0)?",
    branch = "(p(T)?(B|Hp|Hm|Lm|Lp)|mHH)",
    weight = "(ang|kkp|s)Weight"
  input:
    original = lambda wcs: tuples(wcs),
    weights = lambda wcs: tuples(wcs, weight='kkpWeight'),
    target = lambda wcs: tuples(wcs, mode='cdata')
  output:
    'output/figures/reweightings/{year}/{mode}/{version}_{branch}_{angacc}_{csp}_{flavor}_{timeacc}_{timeres}_{weight}.pdf',
  log:
    'output/log/reweightings/plot_angular_reweightings/{year}/{mode}/{version}_{branch}_{angacc}_{csp}_{flavor}_{timeacc}_{timeres}_{weight}.log',
  run:
    shell(f"""(time\
    python analysis/angular_acceptance/plot1.py\
    --original {input.original}\
    --weights {input.weights}\
    --target {input.target}\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version {wildcards.version}\
    --branch {wildcards.branch}\
    --weight {wildcards.weight}\
    --kkpweighted {output}\
    ) &> {log}""")
    send_mail(f"Reweighting plot AA :: {wildcards}", f"{output}")
    if NOTE:
      note_path = f"{output}".replace("output/figures", f"{NOTE}/figs")
      shell(f"cp {output} {note_path}")


rule reweightings_simon_comparisons:
  resources:
    mem_mb=1024
  input:
    original = lambda wcs: tuples(wcs),
    target = lambda wcs: tuples(wcs,mode='cdata')
  output:
    'output/figures/reweightings/{year}/{mode}/{version,[A-Za-z0-9]+}_{branch}_comparison.pdf',
  log:
    'output/log/reweightings/simon_comparisons/{year}/{mode}/{version}_{branch}.log',
  run:
    shell(f"""(time\
    python analysis/reweightings/reweighting_plots.py\
    --original {input.original}\
    --target {input.target}\
    --year {wildcards.year}\
    --mode {wildcards.mode}\
    --version {wildcards.version}\
    --branch {wildcards.branch}\
    --sweighted {output.sweighted}\
    --kinweighted {output.kinweighted}\
    ) &> {log}""")

# }}}


# vim: fdm=marker
