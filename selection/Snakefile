

# Configuration for the selection is in an independent file
import yaml

#Load eos paths (restripped or usual tuples)
if config['stripping_mode']=='pidcuts':
  with open('selection/config.yaml') as file:
    selconfig = yaml.load(file, Loader=yaml.FullLoader)

elif config['stripping_mode']=='nopidcuts':
  with open('selection/config_restripped.yaml') as file:
    selconfig = yaml.load(file, Loader=yaml.FullLoader)


include: 'helpers.smk'
include: 'bdt/Snakefile'
include: 'LbBKG/Snakefile'
# include: 'Snakefile-Bs2DsPi'


# some extra helpers {{{

def cut_keys_mode(wildcards):
    """
    Define cut keys to be applied if not all. 
    Only exception at the moment is DsPi.
    """
    # RR Warning updated pipeline
    # if 'Bs2DsPi' not in wildcards.mode:
    #    return 'B_TAU_cuts L0_cuts HLT1_cuts HLT2_cuts B_cuts phi_cuts'
    if 'Bs2DsPi' not in wildcards.mode:
        if 'MC' in wildcards.mode: 
            return 'L0_cuts B_cuts phi_cuts B_TAU_cuts HLT1_cuts HLT2_cuts MC_specific'   
        else:
            return 'L0_cuts B_cuts phi_cuts B_TAU_cuts HLT1_cuts HLT2_cuts'

 
    return 'all'


def grid_tuples(wcs):
    """
    List tuples in grid

    Parameters
    ----------
    wcs : dict
        Wildcards from a snakemake rule

    Output
    ------
    list[str]
        List of strings to XRootD files in grid
    """
    mode = wcs.mode
    year = wcs.year
    if 'MC' in wcs.mode:
        loc = 'eos_mc'
        _t = selconfig[loc][mode][int(year)][wcs.strip_sim][wcs.polarity]
    else:
        loc = 'eos_data'
        _t = selconfig[loc][selconfig['streams'][mode]][int(year)]
    _t = _t.split(' ')
    return [XRootD.remote(__t) for __t in _t]

# }}}


# Preselection Data {{{

if config['run_preselection']:
    rule preselection_data:
        """
        Generic rule.
        Apply cuts specified in input yaml files on the given tree and adds branches
        specified in the corresponding yaml file. Saves new tree in the requested location

        WARNING: This rule is directly fed from Grid tuples
        """
        threads: 2
        resources:
            mem_mb = 6000
        wildcard_constraints:
            mode = "(Bs2JpsiPhi|Bd2JpsiKstar|Bu2JpsiKplus|Bs2JpsiPhi_Lb|Bs2JpsiPhi_Prompt)"
        input:
            # files = lambda wcs: grid_tuples(wcs)
            # files = '/scratch46/marcos.romero/sidecar14/{year}/{mode}_{strip_sim}_pidcorrected.root'
        output:
            temporal(SAMPLES + '/{year}/{mode}/{version}_preselected.root')
        log:
            'output/log/selection_preselection/{year}/{mode}/{version}.log'
        params:
            script = 'selection/tools/apply_selection.py',
            cuts = 'selection/cuts.yaml',
            branches = 'selection/branches.yaml',
            cut_keys = cut_keys_mode,
            files = lambda wildcards: selconfig['eos_data'][selconfig['streams'][wildcards.mode]][int(wildcards.year)],
            treename = lambda wildcards: selconfig['treenames'][wildcards.mode]
        run:
            shell('(time python {params.script}\
            --input-file {params.files} \
            --input-tree-name {params.treename} \
            --output-file {output} \
            --mode {wildcards.mode} \
            --cut-keys {params.cut_keys} \
            --selection-files {params.cuts} \
            --branches-files {params.branches} \
            --year {wildcards.year}) &> {log}')

# }}}


# Prepare MC tuple {{{

if config['run_preselection']:
    rule preselection_prepare_mc:
        """
        Generic rule.
        Do not apply cuts, only add branches specified in the corresponding yaml
        file and save new tree in the requested location
        """
        wildcard_constraints:
            mode  = "(MC)((?!.*?(_fromLb)).*)"
        threads: 2
        resources:
            mem_mb = 6000
        output:
            temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_prepared{polarity}.root'),
        params:
            files = lambda wildcards: selconfig['eos_mc'][wildcards.mode][int(wildcards.year)][wildcards.strip_sim][wildcards.polarity],
            script = 'selection/tools/apply_selection.py',
            branches = ['selection/branches.yaml', 'selection/generator_level_branches_to_be_merged.yaml'],
            treename = lambda wildcards: selconfig['treenames'][wildcards.mode]
        log:
            'output/log/preselection_prepare_mc/{year}/{mode}/{version}_{strip_sim}_prepared{polarity}.log'
        run:
            shell('(time python {params.script} \
            --input-file {params.files} \
            --input-tree-name {params.treename} \
            --output-file {output} \
            --mode {wildcards.mode} \
            --branches-files {params.branches} \
            --year {wildcards.year} ) &> {log}')


    rule preselection_prepare_genlvl:
        """
        Generic rule.
        Create tuple with generator level information, that contains only specified
        branches
        """
        threads: 2
        resources:
            mem_mb = 6000
        output:
            temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_genlevel{polarity}.root'),
        log:
            'output/log/prepare_genlvl_mc/{year}/{mode}/{version}_{strip_sim}_prepared{polarity}.log'
        params:
            files = lambda wildcards: selconfig['eos_mc'][wildcards.mode][int(wildcards.year)][wildcards.strip_sim][wildcards.polarity],
            script = 'selection/tools/apply_selection.py',
            branches = 'selection/generator_level_branches_to_be_created.yaml',
            gen_treename = lambda wildcards: selconfig['treenames'][wildcards.mode].replace('_Tuple/DecayTree','_MCTuple/MCTuple')
        run:
            shell('(time python {params.script} \
            --input-file {params.files} \
            --input-tree-name {params.gen_treename} \
            --output-file {output} \
            --output-tree-name MCTuple \
            --mode {wildcards.mode} \
            --branches-files {params.branches} \
            --year {wildcards.year} \
            ) &> {log}')


    rule preselection_add_genlvl_info:
        """
        Generic rule.
        Add generator level information to specified MC tuple from given tuple with
        generator level information (produced by `prepare_generator_level_tuple`)
        """
        threads: 2
        resources:
            mem_mb = 6000
        input:
            input_file = expand(rules.preselection_prepare_mc.output,
                                mode='{mode}', version='{version}', year='{year}',
                                strip_sim='{strip_sim}', polarity='{polarity}'),
            input_gen_file = expand(rules.preselection_prepare_genlvl.output,
                                    mode='{mode}', version='{version}',
                                    year='{year}', strip_sim='{strip_sim}',
                                    polarity='{polarity}'),
        params:
            script = 'selection/tools/add_generator_level_info.py',
            branches = 'selection/generator_level_branches_to_be_merged.yaml'
        output:
            file = temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pipas{polarity}.root'),
            file_tmp = temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pipas{polarity}_tmp.root'),
            # file = temp(tuples_path('{mode}/{year}/{strip_sim}/{mode}_{year}_{strip_sim}_{polarity}_selected_with_gen.root')),
            # file_tmp = temp(tuples_path('{mode}/{year}/{strip_sim}/{mode}_{year}_{strip_sim}_{polarity}_selected_with_gen_tmp.root'))
        log:
            'output/log/selection_prepare_mc/{year}/{mode}/{version}_{strip_sim}_prepared{polarity}.log'
        run:
            shell('(time python {params.script} \
            --input-file {input.input_file} \
            --input-gen-file {input.input_gen_file} \
            --output-file {output.file} \
            --output-file-tmp {output.file_tmp} \
            --mode {wildcards.mode} \
            --branches-files {params.branches} \
            ) &> {log}')

# }}}


# NOTE: Running PID corrections is an expensive computational task. That is why
#       this behaviour is disabled by default.
if config['run_pid']:
    include: 'pid/Snakefile'


# Preselection MC {{{

# rompe el pipeline
if config['run_preselection']:
    rule preselection_merge_polarities:
        """
        Generic rule.
        Merges input root files using hadd command and saves the output to the
        given path.
        """
        wildcard_constraints:
            mode  = "(MC)((?!.*?(_fromLb)).*)"
        threads: 2
        resources:
            mem_mb = 6000
        input:
            expand(
                SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorrected{polarity}.root',
                version='{version}', mode='{mode}', strip_sim='{strip_sim}',
                year='{year}', polarity=selconfig['polarities'])
        output:
            # temp(tuples_path('{mode}/{year}/{strip_sim}/{mode}_{year}_{strip_sim}_selected_pidcorrected.root'))
            # ELMARCS
            temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorrected.root')
        log:
            'output/log/preselection_merge_polartities/{year}/{mode}/{version}_{strip_sim}_pidcorrected.log'
        run:
            shell('(hadd -f {output} {input}) &> {log}')

    rule samples_upload_pidtuple:
      wildcard_constraints:
        # surname = "(lbWeight|tagged)"
        weight = "(selected|sWeight|lbWeight|tagged)"
      threads: 2
      resources:
        mem_mb=6144
      params:
        os.path.join(settings.user['eos'], 'tuples_pidcorrected')
      input:
        SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorrected.root'
      output:
        SAMPLES+'/{year}/{mode}/{version,[A-Za-z0-9]+}_{strip_sim}_pidcorrected.eos'
      run:
        m = f'{wildcards.mode}'
        y = f'{wildcards.year}'
        v = f'{wildcards.version}'
        s = f'{wildcards.strip_sim}'
        local = f'{input}'
        # phi-scq tuple handler is smarter than the user, and it knows which is the
        # actual last tuple the user wants if she/he asks for some tuple that do
        # not exist
        # w = f'{wildcards.weight}'
        # w = os.path.basename(local).replace('.root', '')
        # w = w.split('_')[-1]  # remove version
        # jan22, we decided the following naming convention for eos tuples
        eos = os.path.join(f"{params}", v, m, y, f"{v}_{m}_{y}_{s}.root")
        remote = f"root://eoslhcb.cern.ch/{eos}"
        # eos = f'{input}'.replace(SAMPLES, f"{params}")
        # if s == 'lbWeight':
        #     eos.replace('_lbWeight.root', '_ready.root')
        # elif m != 'Bs2JpsiPhi' and s == 'tagged':
        #     eos.replace('_tagged.root', '_ready.root')
        # shell(f"{}")
        shell(f"(time xrdcp -f {local} {remote}) &> {output}")


    rule preselection_mc:
        """
        Generic rule.
        Apply cuts specified in input yaml files on the given tree and adds branches
        specified jin the corresponding yaml file. Saves new tree in the requested location
        """
        threads: 2
        resources:
            mem_mb = 12000
        wildcard_constraints:
            mode  = "(MC)((?!.*?(_fromLb)).*)"
        input:
            #file = expand(rules.merge_polarities.output, mode='{mode}',
            #                                              year='{year}',
            #                                               strip_sim='{strip_sim}'),
            cuts = 'selection/cuts.yaml',
            file = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorrected.root',
        output:
            # tuples_path('{mode}/{year}/{strip_sim}/{mode}_{year}_{strip_sim}_pidcorrected_selected_preselected.root')
            file = temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_beforeGBW.root'),
        params:
            script = 'selection/tools/apply_selection.py',
            cut_keys = cut_keys_mode,
            # file = lambda wildcards: selconfig['eos'] + '/' + selconfig['version'] + '/PID/{}/{}_{}_{}_selected_pidcorrected.root'.format(wildcards.mode, wildcards.mode, wildcards.year, wildcards.strip_sim)
        log:
            # tuples_path('{mode}/{year}/{strip_sim}/{mode}_{year}_{strip_sim}_pidcorrected_selected_preselected.root')
            'output/log/preselection_mc/{year}/{mode}/{version}_{strip_sim}.log'
        run:
            shell('(time python {params.script} \
            --input-file {input.file} \
            --output-file {output} \
            --mode {wildcards.mode} \
            --selection-files {input.cuts} \
            --cut-keys {params.cut_keys} \
            --year {wildcards.year}) &> {log}')

# }}}


include: 'gb_weights/Snakefile'


# Merge strippings {{{

rule selection_add_arrays:
    threads: 2
    resources:
        mem_mb = 6000
    input:
        files = lambda wildcards: expand(rules.selection_gbw_compute.output if wildcards.mode != 'MC_Bs2JpsiPhi_Prompt'
                                                                             else rules.selection_gbw_compute_prompt.output, 
                                                                             mode=wildcards.mode, 
                                                                             strip_sim=wildcards.strip_sim, 
                                                           version=wildcards.version,
                                                                             year=wildcards.year),

        files_arrays = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_beforeGBW.root',
        # files_arrays = expand(rules.apply_preselection_mc.output, year='{year}',
        #                                                    mode='{mode}',
        #                                                    version='{version}',
        #                                                    strip_sim='{strip_sim}'), 
        variables = 'selection/array_branches.yaml' 
    params:
        script  = 'selection/tools/add_arrays.py',
    output:
        file = temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_witharrs.root'),
        file_tmp = temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_witharrs_tmp.root'),
        # file = tuples_path('{mode}/{mode}_{strip_sim}_{year}_pid_gb_arr.root'),
        # file_tmp = temp(tuples_path('{mode}/{mode}_{strip_sim}_{year}_pid_gb_arr_tmp.root'))
    shell:
        'python {params.script} --input-file {input.files} \
                               --input-file-arrays {input.files_arrays} \
                               --variables-files {input.variables} \
                               --mode {wildcards.mode} \
                               --output-file {output.file} \
                               --output-file-tmp {output.file_tmp}'



# modes = ['MC_Bs2JpsiPhi', 'MC_Bs2JpsiPhi_Prompt']

rule selection_merge_strippings:
    wildcard_constraints:
        mode = "MC_.*"
    threads: 2
    resources:
        mem_mb = 6000
    input:
        input_files = lambda wildcards: expand(
                rules.selection_add_arrays.output.file if wildcards.mode == 'MC_Bs2JpsiPhi' or wildcards.mode == 'MC_Bs2JpsiPhi_Prompt'
                else rules.selection_gbw_compute.output, 
                                                                             mode=wildcards.mode, 
                                                                             version=wildcards.version, 
                                                                             strip_sim=selconfig['strip_sim'][wildcards.mode][wildcards.year],
                                                                             year=wildcards.year)
    params:
        script = 'selection/tools/file_merger.py',
    output:
        # temp(tuples_path('{mode}/{mode}_{year}_pid_gb.root'))
        # >>> file = SAMPLES + '/{year}/{mode}/{version}_pidgb.root',
        file = SAMPLES + '/{year}/{mode}/{version}_preselected.root',
    shell:
        'python {params.script} --input-files {input.input_files} \
                               --output-file {output}'

# }}}


# Merge PID corrected {{{

def all_strippings(wildcards):
    strippings = selconfig['strip_sim'][wildcards.mode][wildcards.year]
    mode = wildcards.mode
    year = wildcards.year
    version = wildcards.version

    files = []
    for strip_sim in strippings:
        # files.append(selconfig['eos'] + '/' + selconfig['version'] + '/PID/{}/{}_{}_'.format(wildcards.mode, wildcards.mode, wildcards.year) + s + '_selected_pidcorrected.root')
        files.append(SAMPLES + f'/{year}/{mode}/{version}_{strip_sim}_pidcorrected.root')

    return ' '.join(files)

rule preselection_merge_pid_corrected:
    """
    Generic rule.
    Merges input root files after applying PID correction using hadd command and saves the output to the
    given path.
    """
    threads: 2
    resources:
        mem_mb = 6000
    input:
        files = all_strippings
    output:
        temporal(SAMPLES + '/{year}/{mode}/{version}_pid.root'),
    output:
        'output/log/preselection_merge_pid_correcited/{year}/{mode}/{version}_pid.log'
    run:
        shell('(hadd -f {output} {input.files}) &> {log}')

# }}}


# Apply VETO {{{

def input_to_background_veto(wildcards):
    return expand(rules.apply_bdt_selection.output,
                  version=wildcards.version, mode=wildcards.mode,
                  year=wildcards.year)

rule selection_apply_veto:
    """
    Generic rule.
    Apply cuts in `cuts.yaml` to veto peaking background
    Saves new tree in the requested location
    """
    threads: 2
    resources:
        mem_mb = 6000
    input:
        # files = input_to_background_veto,
        files = SAMPLES + '/{year}/{mode}/{version}_elected.root',
        cuts = 'selection/cuts.yaml'
    params:
        script = 'selection/tools/apply_selection.py',
    output:
        SAMPLES + '/{year}/{mode}/{version}_selected.root'
    log:
        'output/log/selection_apply_veto/{year}/{mode}/{version}_selected.log'
    run:
        shell('(time python {params.script} \
        --input-file {input.files} \
        --input-tree-name DecayTree \
        --output-file {output} \
        --mode {wildcards.mode} \
        --selection-files {input.cuts} \
        --year {wildcards.year}) &> {log}')

# }}}


# vim: fdm=marker
