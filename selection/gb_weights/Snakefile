# Set of rules to run and apply GB weighting
#

with open('selection/gb_weights/config.yml') as file:
    GBW_CONFIG = yaml.load(file, Loader=yaml.FullLoader)


# preliminar selection before GB {{{

rule selection_gbw_preliminar_mc:
    """
    Rule for selecting MC for GB weights.
    Apply cuts specified in input yaml files on the given tree and adds branches
    specified in the corresponding yaml file. Saves new tree in the requested location
    """
    threads: 4
    resources:
        mem_mb = 6000
    wildcard_constraints:
        mode = "MC_(Bs2JpsiPhi|Bs2JpsiKK_Swave|Bs2JpsiPhi_Prompt|Bd2JpsiKstar|Bu2JpsiKplus)(_dG0)?"
    input:
        cuts = ['selection/cuts.yaml', 'selection/gb_weights/cuts.yaml'],
        branches = 'selection/branches.yaml',
        file = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_pidcorrected.root',
    output:
        temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_preliminarGBW.root'),
    params:
        script = 'selection/tools/apply_selection.py',
        # CHANGE IN CUT KEYS
        cutkeys = 'B_TAU_cuts L0_cuts HLT1_cuts HLT2_cuts MC_specific',
        # cutkeys = 'L0_cuts B_cuts phi_cuts B_TAU_cuts L0_cuts HLT1_cuts HLT2_cuts MC_specific_GBW',
    log:
        'output/log/selection_gbw_preliminar_mc/{year}/{mode}/{version}_{strip_sim}.log'
    run:
        shell(f'(time python {params.script} \
        --input-file {input.file} \
        --output-file {output} \
        --mode {wildcards.mode} \
        --cut-keys {params.cutkeys} \
        --selection-files {input.cuts} \
        --branches-files {input.branches} \
        --year {wildcards.year} \
        ) &> {log}')


rule selection_gbw_preliminar_data:
    """
    Rule for sweighting data for GB weights.
    Apply cuts specified in input yaml files on the given tree and adds branches
    specified in the corresponding yaml file. Saves new tree in the requested location
    """
    threads: 4
    resources:
        mem_mb = 6000
    wildcard_constraints:
        mode = "(Bs2JpsiPhi|Bs2JpsiPhi_Prompt|Bd2JpsiKstar|Bu2JpsiKplus)"
    input:
        cuts = ['selection/cuts.yaml', 'selection/gb_weights/cuts.yaml'],
        branches = ['selection/gb_weights/branches.yaml',
                    'selection/gb_weights/weighting_variables.yaml']
    output:
        temporal(SAMPLES + '/{year}/{mode}/{version}_preliminarGBW.root')
    params:
        script = 'selection/tools/apply_selection.py',
        files = lambda wildcards: selconfig['eos_mc'][wildcards.mode][int(wildcards.year)][wildcards.strip_sim] \
                if wildcards.mode.startswith('MC_') \
                else selconfig['eos_data'][selconfig['streams'][wildcards.mode]][int(wildcards.year)],
        treename = lambda wildcards: selconfig['treenames'][wildcards.mode],
        # CHANGE IN CUT KEYS
        cutkeys = 'B_TAU_cuts L0_cuts HLT1_cuts HLT2_cuts B_cuts_SW_GBW',
        # cutkeys = 'L0_cuts B_cuts_SW_GBW phi_cuts B_TAU_cuts HLT1_cuts HLT2_cuts',
    log:
        'output/log/selection_gbw_preliminar_data/{year}/{mode}/{version}.log'
    run:
        shell(f'(time python {params.script} \
        --input-file {params.files} \
        --input-tree-name {params.treename} \
        --output-file {output} \
        --mode {wildcards.mode} \
        --cut-keys {params.cutkeys} \
        --selection-files {input.cuts} \
        --branches-files {input.branches} \
        --year {wildcards.year}) &> {log}')

# }}}


# sweigting for GB weighting {{{

def tuples_for_subtraction(wcs):
    mode = f"{wcs.mode}"
    year = f"{wcs.year}"
    version = f"{wcs.version}"
    strip_sim = f"{wcs.strip_sim}"
    if not 'Prompt' in f"{wcs.mode}":
        return SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_gbWeight.root'
    else:
        return SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_preliminarGBW.root'


rule selection_gbw_tails:
    """
    Rule for sweighting data for GB weights.
    Performs fit to Bs mass. Saves new tree with sweights in the requested location
    """
    threads: 2
    resources:
        mem_mb = 12000
    wildcard_constraints:
        mode = "MC_(Bs2JpsiPhi|Bs2JpsiKK_Swave|Bs2JpsiPhi_Prompt|Bd2JpsiKstar|Bu2JpsiKplus)(.*)?"
    input:
        sample = lambda wcs: expand(SAMPLES + '/{{year}}/{{mode}}/{{version}}_{strip_sim}_preliminarGBW.root',
                        strip_sim=selconfig['strip_sim'][wcs.mode][wcs.year])
    params:
        script = 'selection/gb_weights/background_subtraction.py',
        mass_branch = lambda w: GBW_CONFIG['mass_branch'][f"{w.mode}"],
        mass_model = lambda w: GBW_CONFIG['mass_model'][f"{w.mode}"],
    output:
        # temp(tuples_path('{mode}/{mode}_{year}_GBW_data_sweighted.root'))
        # sweights = SAMPLES + '/{year}/{mode}/{version}_bkgsubtracted.root',
        pars = 'output/params/tails_mc/{year}/{mode}/{version}.json',
        plots = directory('output/figures/tails_mc/{year}/{mode}/{version}/')
    log:
        # temp(tuples_path('{mode}/{mode}_{year}_GBW_data_sweighted.root'))
        'output/selection_gbw_tails/{year}/{mode}/{version}.log',
    run:
        shell('mkdir -p {output.plots}')
        shell(f"""(time python {params.script} \
        --sample {",".join(input.sample)} \
        --mass-branch {params.mass_branch} \
        --mass-model {params.mass_model} \
        --output-params {output.pars} \
        --output-figures {output.plots} \
        --mode {wildcards.mode} \
        --version {wildcards.version} \
        --year {wildcards.year})
        &> {log}""")


rule selection_gbw_bkgsubtract:
    """
    Rule for sweighting data for GB weights.
    Performs fit to Bs mass. Saves new tree with sweights in the requested location
    """
    threads: 2
    resources:
        mem_mb = 12000
    wildcard_constraints:
        mode = "(MC_)?(Bs2JpsiPhi|Bs2JpsiPhi_Prompt|Bd2JpsiKstar|Bu2JpsiKplus)"
    input:
        sample = SAMPLES + '/{year}/{mode}/{version}_preliminarGBW.root',
        # pars = lambda wcs: expand('output/params/tails_mc/{{year}}/{mode}/{{version}}.json',
        #                           mode=GBW_CONFIG['tails_mode'][wcs.mode]),
    params:
        script = 'selection/gb_weights/background_subtraction.py',
        mass_branch = lambda w: GBW_CONFIG['mass_branch'][f"{w.mode}"],
        mass_model = lambda w: GBW_CONFIG['mass_model'][f"{w.mode}"],
        # mass_model = 'dgauss',
    output:
        sweights = temporal(SAMPLES + '/{year}/{mode}/{version}_bkgsubtracted.root'),
        pars = 'output/params/background_subtraction/{year}/{mode}/{version}.json',
        plots = directory('output/figures/background_subtraction/{year}/{mode}/{version}/')
    log:
        'output/log/selection_gbw_bkgsubtract/{year}/{mode}/{version}.log',
    run:
        shell('mkdir -p {output.plots}')
        shell('(time python {params.script} \
        --sample {input.sample} \
        --sweights {output.sweights} \
        --mass-branch {params.mass_branch} \
        --mass-model {params.mass_model} \
        --output-params {output.pars} \
        --output-figures {output.plots} \
        --mode {wildcards.mode} \
        --version {wildcards.version} \
        --year {wildcards.year})\
        #&> {log}')


# rule selection_gbw_bkgsubtract_data:
#     """
#     Rule for sweighting data for GB weights.
#     Performs fit to Bs mass. Saves new tree with sweights in the requested location
#     """
#     threads: 2
#     resources:
#         mem_mb = 12000
#     wildcard_constraints:
#         # mode = "(Bs2JpsiPhi|Bs2JpsiPhi_Prompt)"    # ORIGINAL
#         mode = "(Bs2JpsiPhi|Bs2JpsiPhi_Prompt|Bd2JpsiKstar|Bu2JpsiKplus)"
#     input:
#         tuple_file = SAMPLES + '/{year}/{mode}/{version}_preliminarGBW.root'
#         # tuple_file = expand(rules.select_GBW_data_ntuples.output,
#         #                     year='{year}', version='{version}', mode='{mode}'),
#     params:
#         script = 'selection/gb_weights/sweights_for_gb_weights.py',
#         branch_name = 'B_ConstJpsi_M_1',
#     output:
#         # temp(tuples_path('{mode}/{mode}_{year}_GBW_data_sweighted.root'))
#         sample = SAMPLES + '/{year}/{mode}/{version}_bkgsubtracted.root',
#         plots = directory(SAMPLES + '/{year}/{mode}/{version}_bkgsubtracted/')
#     log:
#         # temp(tuples_path('{mode}/{mode}_{year}_GBW_data_sweighted.root'))
#         'output/selection_data_background_subtraction/{year}/{mode}/{version}.log',
#     run:
#         shell('mkdir -p {output.plots}')
#         shell('(time python {params.script} \
#         --input-file {input.tuple_file} \
#         --output-file {output.sample} \
#         --input-branch {params.branch_name} \
#         --plot-dir {output.plots} \
#         --mode {wildcards.mode} \
#         --year {wildcards.year}) &> {log}')

# }}}

def tuples_for_gbw(wildcards):
    mode = wildcards.data_mode
    if wildcards.data_mode == 'Bs2JpsiPhi_Prompt':
        return expand(rules.selection_gbw_preliminar_data.output, version=wildcards.version, year=wildcards.data_year, mode=wildcards.data_mode)
    else:
        return expand(rules.selection_gbw_bkgsubtract.output.sweights, version=wildcards.version, mode=wildcards.data_mode, year=wildcards.data_year)


# calculate GB weights {{{

rule selection_gbw_reweighter_train:
    """
    Rule to calculate GB weights on MC using sweighted data.

    """
    threads: 2
    resources:
        mem_mb = 12000
    input:
        # data = sweighted_data_for_gb_weights,
       # data = SAMPLES + '/{data_year}/{data_mode}/{version}_bkgsubtracted.root',
        data = lambda wcs: tuples_for_gbw(wcs),
        # data = SAMPLES + '/{data_year}/{data_mode}/{version}_bkgsubtracted.root',
        mc = SAMPLES + '/{mc_year}/{mc_mode}/{version}_{strip_sim}_preliminarGBW.root',
    params:
        script = 'selection/tools/reweighting.py',
        variables_file = 'selection/gb_weights/weighting_variables.yaml',
        target_weight = lambda wildcards: 'sw' if wildcards.data_mode != 'Bs2JpsiPhi_Prompt' else '1',
        weight_method = 'gb'
    output:
        # tuples_path('{mc_mode}/{mc_year}/{strip_sim}/{mc_mode}_{mc_year}_{strip_sim}_{data_mode}_{data_year}_GB_weights.pkl'),
        temporal(SAMPLES + '/{mc_year}/{mc_mode}/{version}_{strip_sim}_gbWeighted_{data_mode}_{data_year}.pkl')
    log:
        'output/log/selection_gbw_reweighter_train/{mc_year}/{mc_mode}/{version}_{strip_sim}_{data_mode}-{data_year}.log'
    run:
        shell('(time python {params.script} \
        --original-file {input.mc} \
        --target-file {input.data} \
        --target-weight {params.target_weight} \
        --mode {wildcards.mc_mode} \
        --weight-method {params.weight_method} \
        --variables-files {params.variables_file} \
        --output-file {output}) \
        &> {log}')

# }}}


# Track scaling {{{

def trackchi2_vars(wildcards):
    mode = wildcards.mode
    if wildcards.mode == 'MC_Bu2JpsiKplus':
        return '{"hplus_TRACK_CHI2NDOF", "muplus_TRACK_CHI2NDOF", "muminus_TRACK_CHI2NDOF"}'
    else:
        return '{"hplus_TRACK_CHI2NDOF", "hminus_TRACK_CHI2NDOF", "muplus_TRACK_CHI2NDOF", "muminus_TRACK_CHI2NDOF"}'


rule selection_gbw_trackchi2_scaling:
    """
    Rule to rescale TrackChi2 variables on MC using sweighted data.
    """
    threads: 2
    resources:
        mem_mb = 12000
    input:
        input_mc = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_beforeGBW.root',
        input_data =  lambda wcs: expand(
                SAMPLES + '/{data_year}/{data_mode}/{version}_bkgsubtracted.root',
                version = wcs.version,
                data_mode = selconfig['gbw_input_data_mode'][f'{wcs.mode}'],
                data_year = selconfig['gbw_input_data_year'][f'{wcs.year}']
                )

    params:
        target_weight = lambda wildcards: expand('\"sw\"' if selconfig['gbw_input_data_mode'][wildcards.mode] != 'Bs2JpsiPhi_Prompt'
                                                      else '\"\"'),
        treename = "DecayTree",
        vars = trackchi2_vars,
	    plots = SAMPLES+ 'output/figures/plots/{mode}/{year}/TrackChi2Scaling_{strip_sim}'
    output:
        file = temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_TrackChi2_weighted.root')
    shell:
        "root -l -q 'selection/gb_weights/TrackChi2Rescaling.C({params.vars}, {params.target_weight}, \"{input.input_mc}\", \"{input.input_data}\", \"{output.file}\", \"{params.treename}\", \"{params.treename}\", \"{params.plots}\")'"

# }}}


# apply GB weights {{{



rule selection_gbw_compute:
    """
    Rule to apply GB weights on MC reading from a pickle file where these have been stored.
    """
    threads: 2
    resources:
        mem_mb = 12000
    input:
        files = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_beforeGBW.root',
        # if we want to apply the scaling, comment the line above and uncomment
        # below
        # files = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_TrackChi2_weighted.root',
        weights_file = lambda wcs: expand(
                SAMPLES + '/{mc_year}/{mc_mode}/{version}_{strip_sim}_gbWeighted_{data_mode}_{data_year}.pkl',
                mc_mode = f'{wcs.mode}',
                mc_year= f'{wcs.year}',
                strip_sim = f'{wcs.strip_sim}',
                version = f'{wcs.version}',
                data_mode = selconfig['gbw_input_data_mode'][f'{wcs.mode}'],
                data_year = wcs.year)
    output:
        temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_gbWeight.root')
    params:
        script = 'selection/tools/apply_weights.py',
        variables_file = 'selection/gb_weights/weighting_variables.yaml',
        weight_method = 'gb',
        output_weight_name = 'gb_weights'
    log:
        'output/log/selection_calculate_gb_weights/{year}/{mode}/{version}_{strip_sim}_gbWeight.log'
    run:
        shell('(time python {params.script} \
        --input-file {input.files} \
        --variables-files {params.variables_file} \
        --weight-method {params.weight_method} \
        --weights-file {input.weights_file} \
        --mode {wildcards.mode} \
        --output-file {output} \
        --output-weight-name {params.output_weight_name}) &> {log}')


rule selection_gbw_compute_prompt:
    """
    Rule to apply GB weights on MC reading from a pickle file where these have been stored.
    For MC_Bs2JpsiPhi_Prompt weighted to Bs2JpsiPhi_Prompt data only
    """
    wildcard_constraints:
        mode = "MC_Bs2JpsiPhi_Prompt"
    threads: 2
    resources:
        mem_mb = 12000
    input:
        # files = lambda wcs: tuples_for_gbw(wcs),
        files = SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_gbWeight.root',
        weights_file = lambda wcs: expand(
                SAMPLES + '/{mc_year}/{mc_mode}/{version}_{strip_sim}_gbWeighted_{data_mode}_{data_year}.pkl',
                mc_mode = f'{wcs.mode}',
                strip_sim = f'{wcs.strip_sim}',
                version = f'{wcs.version}',
                mc_year= f'{wcs.year}',
                data_mode='Bs2JpsiPhi_Prompt',
                data_year = selconfig['gbw_input_data_year'][f'{wcs.year}'])
    output:
        temporal(SAMPLES + '/{year}/{mode}/{version}_{strip_sim}_gbWeightPrompt.root')
    params:
        script = 'selection/tools/apply_weights.py',
        variables_file = 'selection/gb_weights/weighting_variables.yaml',
        weight_method = 'gb',
        output_weight_name = 'gb_weights_prompt'
    log:
        'output/log/selection_calculate_gb_weights_prompt/{year}/{mode}/{version}_{strip_sim}_gbWeight.log'
    run:
        shell('(time python {params.script} \
        --input-file {input.files} \
        --variables-files {params.variables_file} \
        --weight-method {params.weight_method} \
        --weights-file {input.weights_file} \
        --mode {wildcards.mode} \
        --output-file {output} \
        --output-weight-name {params.output_weight_name}) &> {log}')

# }}}


# vim: fdm=marker:cc=120
